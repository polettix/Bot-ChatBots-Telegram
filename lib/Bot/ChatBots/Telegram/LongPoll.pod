=pod

=encoding utf8

=head1 NAME

Bot::ChatBots::Telegram::LongPoll - Telegram updates receiver, long-poll

=head1 SYNOPSIS

   use Bot::ChatBots::Telegram::LongPoll;
   my $lp = Bot::ChatBots::Telegram::LongPoll->new(
      token     => $ENV{TOKEN},
      processor => \&processor,
      start     => 1,
   );
   sub processor { # tube-compliant
      my $record = shift;
      # ... $record is normalized, by default
      return $record; # follow on..
   }

=head1 DESCRIPTION

This is an updates receiver and dispatcher for the Telegram
infrastructure. It connects to Telegram's API for I<long-poll> style (i.e.
pulling updates continuously), so it's somehow inefficient but should let
you get started in all conditions in which you can at least browse the
Internet (webhook require that your endpoint lives in a routable place).

At the base, you have to provide I<at least> the L</token> and the
L</processor>. The former is needed to connect to Telegram and get
updates, the latter is what will be invoked for each update that is
received.

When you have an object, you have to L</start> to get the ball rolling.
You can also pass C<start> in the constructor, this will start the
L<Mojo::IOLoop> directly (so you can use it in case you don't have other
stuff to do).

When invoked, the L</processor> tube can return a record with the C<response>
field set. In this case, this update receiver can act also on the other way
around, and send the C<response> towards Telegram using a
L<Bot::ChatBots::Telegram::Sender>.

=head1 METHODS

This class derives from L<Bot::ChatBots::Telegram::Base> and inherits all
of its methods. Please note that the main method L</send> eventually
expects a C<processor> to be present.

=head2 B<< callback >>

   my $subref = $obj->callback;
   $obj->callback(sub { my ($ua, $tx) = @_; ... });

Accessor for the callback for L<Bot::ChatBots::Telegram::Sender>, defaults
to a subroutine that prints a debug message. This allows having
non-blocking behaviour by default, although you can make calls towards
Telegram blocking by setting this to an undefined value.

Note that this callback is only used for messages sent to Telegram as part
of handling the C<response> field in a record returned by the
L</processor>.

=head2 B<< connect_timeout >>

   my $to = $obj->connect_timeout;
   $obj->connect_timeout(10);

Acccessor for the connection timeout for
L<Bot::ChatBots::Telegram::Sender>'s user agent (this is
L<Mojo::UserAgent>).

=head2 B<< interval >>

   $secs = $obj->interval;
   $obj->interval(0.2); # secs

Accessor for the interval of scheduling calls to C<getUpdates>. You can
set this to a pretty low value (default is 0.1 seconds) because there is
a flag that prevents calls from being sent if another one is ongoing.

=head2 B<< new >>

   my $obj = Bot::ChatBots::Telegram::LongPoll->new(%args);

Constructor, delegates real object constructor to parent class' C<new>
method, and takes care to automatically start the long poll process if
argument C<start> is either absent and set to a true value. This means
that if you I<do not> want the polling process to start automatically, you
have to I<explicitly> pass a I<false> value.

=head2 B<< processor >>

See L<Bot::ChatBots::Telegram::Base/processor>.

=head2 B<< send >>

   $obj->send($request); # OR
   $obj->send($request, $callback);

Thin wrapper for invoking the currently set L</sender> to actually send
a request towards Telegram (L</sender> returns a sub reference).

=head2 B<< sender >>

   my $sender = $obj->sender;
   $obj->sender(Bot::ChatBots::Telegram::Sender->new(token => $token));

Accessor for the L<Bot::ChatBots::Telegram::Sender> object used for
managing communications from/to Telegram.

=head2 B<< start >>

   $obj->start(%args); # OR
   $obj->start(\%args);

Start polling Telegram for new updates.

Upon reception of a new Update, L<Bot::ChatBots::Telegram::Base/process>
is called with a record that has the following structure:

   {
      source => {
         args => \%args,     # whatever you passed in
         object_token => $token,  # copy of token
         ref  => $obj,       # this Bot::ChatBots::Telegram::LongPoll obj
         type => $typename,  # defaults to Bot::ChatBots::Telegram::LongPoll
         token => $token,    # the token set for this LongPoll
      },
      update => $update_object_received_from_telegram,
   }


=head2 B<< token >>

See L<Bot::ChatBots::Telegram::Base/token>.

=head2 B<< update_timeout >>

   my $to = $obj->update_timeout;
   $obj->update_timeout(30);

Accessor to set/get the C<update_timeout> set in the C<getUpdates> call to
the Telegram API. Defaults to 300 seconds, i.e. you should get I<at least>
one update every 5 minutes.


=head1 SEE ALSO

L<Bot::ChatBots>, L<Bot::ChatBots::Telegram::Base>.
L<Bot::ChatBots::Telegram::WebHooks>.

=head1 AUTHOR

Flavio Poletti <polettix@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2016 by Flavio Poletti <polettix@cpan.org>

This module is free software. You can redistribute it and/or modify it
under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
